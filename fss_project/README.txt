ΑΝΑΛΥΤΙΚΗ ΠΕΡΙΓΡΑΦΗ ΚΩΔΙΚΑ 

Το σύστημα αποτελείται από τρία βασικά components:
    -fss_manager: Ο διαχειριστής που παρακολουθεί καταλόγους και διαχειρίζεται τις εργασίες συγχρονισμού 
                 μέσω workers.
    -fss_console: Η διαπαφή χρήστη για αποστολή εντολών στον manager και ανάγνωση απαντήσεων.
    -worker: Αυτόνομες διεργασίες που εκτελούν πραγματικές εργασίες συγχρονισμού αρχείων.
    -fss_script.sh: Βοηθητικό bash script για εμφάνιση αναφορών ή διαγραφή δεδομένων.

Ο fss_manager επικοινωνεί με το fss_console μέσω δύο named pipes (fss_in, fss_out). Οι 
worker διεργασίες ξεκινούν μέσω fork/exec και αναφέρουν τα αποτελέσματά τους μέσω pipes στον manager.

Η κατάσταση παρακολούθησης καταλόγων διατηρείται σε μια δυναμική λίστα (sync_list), και όλες οι εργασίες
(full ή επιμέρους συγχρονισμοί) καταγράφονται στο manager log.


-fss_manager.h: Το fss_manager.h αποτελεί το βασικό header αρχείο για τον διαχειριστή του συστήματος.
                Σε αυτό ορίζονται όλες οι κρίσιμες σταθερές (όπως τα ονόματα των pipes fss_in, fss_out,
                τα όρια πλήθους workers και ουράς συγχρονισμών) και οι βασικές δομές δεδομένων sync_pair 
                και worker_task. H sync_pair κρατά πληροφορίες για κάθε ζεύγος καταλόγων (πηγή-προορισμός)
                μαζί με το status του τελευταίου συγχρονισμού και το πλήθος σφαλμάτων. Η worker_task
                χρησιμοποιείται για να αναπαριστά μια εργασία συγχρονισμού στην ουρά. Δηλώνονται επίσης 
                global μεταβλητές που χρησιμοποιούνται από όλο το πρόγραμμα (όπως οι πίνακες workers, η ουρά, 
                τα pipes και το αρχείο καταγραφής του manager). To header αυτό είναι θεμέλιο για την 
                επικοινωνία μεταξύ των επιμέρους modules του διαχειριστή. 

-inotify_utils.h: Το inotify_utils.h ορίζει τη λειτουργικότητα που σχετίζεται με την παρακολούθηση αρχείων 
                  και καταλόγων χρησιμοποιώντας το σύστημα inotify. Δημιουργείται ο τύπος watch_entry, ο οποίος 
                  αντιστοιχίζει κάθε watch descriptor με το αντίστοιχο monitored directory. Παρέχονται δηλώσεις 
                  συναρτήσεων για την αρχικοποίηση του inotify, την προσθήκη παρακολούθησης νέου καταλόγου και 
                  την επεξεργασία των γεγονότων που ανιχνεύονται (όπως δημιουργίες, τροποποιήσεις ή διαγραφές αρχείων).
                  Το header αυτό χρησιμοποιείται στενά από τον fss_manager για να εντοπίζει αλλαγές στο filesystem 
                  σε πραγματικό χρόνο.

-manager_utils.h: Το manager_utils.h συγκεντρώνει όλες τισ βοηθητικές συναρτήσεις που χρειάζεται ο διαχειριστής 
                  για την εσωτερική του λειτουργία. Περιλαμβάνει δηλώσεις για φόρτωση ζευγών συγχρονισμού από αρχείο 
                  (load config), επεξεργασία εντολών που λαμβάνονται από την κονσόλα (handle_command), διαχείριση της 
                  ουράς εργασιών (queue_sync_task) και ανάθεση νέων tasks σε workers (dispatch_workers). Επίσης, περιέχει
                  τις συναρτήσεις για την καταγραφή μηνυμάτων (log_msg, log_and_print) και την αποθήκευση λεπτομερών 
                  αποτελεσμάτων των workers (log_worker_report). To header αυτό οργανώνει την υποδομή υποστήριξης του manager.

-sync_list.h: To sync_list.h είναι αφιερωμένο στη διαχείριση της λίστας συγχρονισμένων ζευγών μέσω μιας απλής linked list.
              Ορίζεται ο τύπος sync_node, που αποθηκέυει όλα τα σημαντικά δεδομένα για κάθε παρακολουθούμενο ζεύγος: source/target paths,
              χρονική σήμανση τελευταίου συγχρονισμού, αν είναι ενεργό ή σε αναμονή, και αριθμό σφαλμάτων. Παρέχονατι βασικές 
              λειτουργίες όπως η προσθήκη νέου ζεύγους (add_sync_pair), η αναζήτηση υπάρχοντος (find_sync_pair), η ακύρωση παρακολούθησης 
              (cancel_sync_pair) και η εκκίνηση χειροκίνητου συγχρονισμού (start_manual_sync). Αυτό το module οργανώνει τη 
              βασική κατάσταση του συστήματος.

fss_console.c: To fss_console.c υλοποιεί την κονσόλα που χειρίζεται ο τελικός χρήστης. Το πρόγραμμα αυτό ανοίγει τα named pipes
               fss_in και fss_out, επιτρέποντας την αποστολή εντολών στον fss_manager και τη λήψη απαντήσεων. Διαβάζει εντολές 
               από το πληκτρολόγιο, τις καταγράφει με timestamp σε ειδικό αρχείο log, τις στέλνει στον διαχειριστή, και στη συνέχεια 
               λαμβάνει τις απαντήσεις που τυπώνονται στην οθόνη και καταγράφονται στο console-log. Επιπλέον, χειρίζεται ειδικά την 
               εντολή shutdown, όπου τερματίζει το σύστημα ομαλά. Η console αποτελεί το βασικό interface αλληλεπίδρασης με το 
               σύστημα συγχρονισμού. 

-fss_manager.c: To fss_manager.c περιέχει την κεντρική ροή εκτέλεσης του διαχειριστή. Με την εκκίνησή του, αρχικοποιεί το inotify,
                φορτώνει το configuration αρχείο και ξεκινά τον αρχικό συγχρονισμό όλων των ζευγών. Δημιουργεί τα pipes fss_in και 
                fss_out για την επικοινωνία με την κονσόλα, και χρησιμοποιεί poll() για να περιμένει ταυτόχρονα είτε input από την 
                κονσόλα είτε filesystem γεγονότα μέσω του inotify. Για κάθε νέο filesystem event ή εντολή χρήστη, καλεί κατάλληλες 
                συναρτήσεις ώστε να ξεκινήσει συγχρονισμό ή να απαντήσει. Επίσης, χειρίζεται την κατάσταση των workers φροντίζοντας 
                να μην ξεπερνιέται το όριο ταυτόχρονων διεργασιών, και διαχειρίζεται την ουρά εργασιών.

-inotify_utils.c: To inotify_utils.c υλοποιεί την παρακολούθηση γεγονότων στο filesystem με το API του inotify. Αρχικοποιεί το inotify,
                  προσθέτει παρακολούθηση σε συγκεκριμένους καταλόγους, και όταν εντοπίζει γεγονότα (δημιουργία, τροποποίηση, διαγραφή αρχείων),
                  εντοπίζει τον σχετικό κατάλογο και ξεκινά νέο worker για την επεξεργασία της αλλαγής. Ο κώδικας χρησιμοποιεί fork-exec
                  λογική, όπου ο worker γράφει μέσω pipe μια λεπτομερή αναφορά (EXEC_REPORT), την οποία αναλύει και καταγράφει ο διαχειριστής.

-manager_utils.c: To manager_utils.c συγκεντρώνει όλη τη βοηθητική λογική για τη σωστή διαχείριση του συστήματος. Επεξεργάζεται το
                  configuration file για να φορτώσει αρχικά τα ζεύγη directories. Παρέχει ουρά αναμονής εργασιών (queue_sync_task) 
                  και χειρίζεται την εκκίνηση νέων workers (dispatch_workers) μόνο όταν υπάρχει διαθέσιμος χώρος βάσει του ορίου workers.
                  Περιέχει signal handler για SIGCHLD σήματα, ώστε να ενημερώνεται όταν ένας worker τερματίσει, και καταγράφει λεπτομερώς 
                  όλες τις εργασίες, επιτυχίες και σφάλματα στο log αρχείο.

-sync_list.c: To sync_list.c χειρίζεται την εσωτερική αποθήκευση όλων των συγχρονιζόμεων ζευγών καταλόγων. Χρησιμοποιεί linked list για να 
              αποθηκεύει κάθε ζεύγος και παρέχει λειτουργίες για να προσθέτει νέα, να αναζητά υπάρχοντα, να ακυρώνει παρακολούθηση, να εκκινεί
              χειροκίνητο συγχρονισμό, και να ελευθερώνει σωστά τη μνήμη κατά τον τερματισμό. Διατηρεί χρήσιμες πληροφορίες για κάθε ζεύγος 
              όπως τον χρόνο τελευταίου συγχρονισμού και τον αριθμό αποτυχιών. 

-worker.c: To worker.c είναι το πρόγραμμα που εκτελείται από κάθε worker για να συγχρονίσει αρχεία. Ανάλογα με την παράμετρο operation
           (FULL, ADDED, MODIFIED, DELETED), είτε αντιγράφει όλα τα αρχεία ενός καταλόγου είτε διαχειρίζεται συγκεκριμένα αρχεία. Όλες οι 
           λειτουργίες υλοποιούνται με χαμηλού επιπέδου system calls (open, read, write, unlink), χωρίς χρήση υψηλού επιπέδου εντολών (cp, rsync).
           Στο τέλος, δημιουργείται μια αναφορά εκτέλεσης (EXEC_REPORT) που περιγράφει το αποτέλεσμα (επιτυχία, μερική επιτυχία ή αποτυχία) και 
           αποστέλλεται μέσω pipe στον διαχειριστή.

-fss_script.sh: To fss_script.sh είναι ένα bash script το οποίο παρέχει επιπλέον λειτουργικότητα για reporting και purge. Μπορεί να διαβάσει το 
                logfile και να εμφανίσει λίστα με όλους τους συγχρονισμένους καταλόγους (listAll), μόνο τους ενεργούς (listMonitored) ή μόνο τους 
                σταματημένους (listStopped). Επίσης, μπορεί να διαγράψει έναν κατάλογο προορισμού ή το αρχείο καταγραφής αν δοθεί η εντολή purge.
                To script λειτουργεί με παραμέτρους γραμμής εντολών και κάνει βασικούς ελέγχους εγκυρότητας για το path που του δίνεται. 

-fss_script.sh: To fss_script.sh είναι ένα βοηθητικό bash script το οποίο διαχειρίζεται τις αναφορές συγχρονισμού που καταγράφονται απο το fss_manager.
                Συγκεκριμένα, παρέχει λειτουργίες για:
                    -Εμφάνιση όλων των συγχρονισμένων καταλόγων με πληροφορίες για την τελευταία ενέργεια
                    -Λίστα των καταλόγων που παρακολουθούνται ενεργά
                    -Λίστα των καταλόγων που έχουν σταματήσει να παρακολουθούνται 
                    -Διαγραφή ενός καταλόγου ή αρχείου αναφοράς
                Το script καλείται με σύνταξη: 
                    -./fss_script.sh -p <path_to_log_or_directory> -c <command>
                όπου διαθέσιμες εντολές <command> είναι:
                    -listAll
                    -listMonitored
                    -listStopped
                    -purge

ΠΑΡΑΔΟΧΕΣ 


-Flat directories: Όλοι οι παρακολουθούμενοι κατάλογοι περιέχουν μόνο αρχεία, όχι υποκαταλόγους.

-source → target: Κάθε κατάλογος πηγής αντιστοιχεί σε ένα μοναδικό κατάλογο προορισμού.

-Overwrite χωρίς timestamp checking: Αν υπάρχει ήδη αρχείο στον προορισμό, γίνεται απλό overwrite.

-Named Pipes με O_NONBLOCK: Χρησιμοποιείται non-blocking άνοιγμα των pipes για αποφυγή deadlocks.

-Αντιμετώπιση σφαλμάτων: Όλα τα σφάλματα καταγράφονται με strerror(errno) σε αναφορά (EXEC_REPORT).

-Ο μέγιστος αριθμός ταυτόχρονων workers καθορίζεται με παράμετρο `-n`.


ΕΚΤΕΛΕΣΗ 

-Εκκίνηση fss_manager:   ./bin/fss_manager -l manager_log.txt -c config.txt -n "$WORKER_LIMIT"

-Εκκίνηση fss_console:   ./bin/fss_console -l console_log.txt

-Εκτέλεση βοηθητικού script:  bash fss_script.sh -p <logfile_or_directory> -c <command>